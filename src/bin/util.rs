use std;
use modem::fir;

pub trait Write16 {
    fn write_i16(&mut self, n: i16) -> std::io::Result<usize>;
}

pub trait Read16 {
    fn read_i16(&mut self) -> std::io::Result<i16>;
}

impl<W> Write16 for W where W: std::io::Write {
    fn write_i16(&mut self, n: i16) -> std::io::Result<usize> {
        let buf: [u8; 2] = unsafe { std::mem::transmute(n) };
        self.write(&buf)
    }
}

impl<R> Read16 for R where R: std::io::Read {
    fn read_i16(&mut self) -> std::io::Result<i16> {
        let mut buf = [0, 0];

        match self.read(&mut buf) {
            Ok(2) => Ok(unsafe { std::mem::transmute(buf) }),
            Ok(_) => Err(std::io::Error::new(std::io::ErrorKind::Other,
                                             "no more words available")),
            Err(e) => Err(e),
        }
    }
}

// Create a Hilbert transform FIR filter. Generated with matlab.
pub fn hilbert() -> fir::FIRFilter<'static> {
    const COEFS: &'static [f64] = &[
        -0.007576,
        -2.803e-16,
        -0.019824,
        3.7096e-16,
        -0.044089,
        1.3201e-16,
        -0.089244,
        -3.2694e-16,
        -0.18728,
        -1.6739e-16,
        -0.62794,
        0.0,
        0.62794,
        1.6739e-16,
        0.18728,
        3.2694e-16,
        0.089244,
        -1.3201e-16,
        0.044089,
        -3.7096e-16,
        0.019824,
        2.803e-16,
        0.007576,
    ];

    fir::FIRFilter::new(COEFS)
}

// Create a lowpass FIR filter with
//   passband: 0 to 1000Hz
//   stopband: 1500 to 5000Hz
// Assuming a 10,000Hz sample rate. Generated with matlab.
pub fn lowpass() -> fir::FIRFilter<'static> {
    const COEFS: &'static [f64] = &[
        8.6464950643449706e-05,
        -0.0011227727551926443,
        -0.0010137373532784653,
        -0.00051892546397063074,
        0.00065737693207229997,
        0.0019426724039296576,
        0.0023575316971358984,
        0.0011698129325984573,
        -0.0014109570575621668,
        -0.0040119731215088154,
        -0.0047065995954001117,
        -0.0022692944513388992,
        0.0026579628895631122,
        0.0073998732470493874,
        0.0085194671337849165,
        0.0040456650224074651,
        -0.0046645972566385554,
        -0.012862659808170144,
        -0.014703261637603555,
        -0.0069572953029268525,
        0.00800563700908981,
        0.022172065878291854,
        0.025574286331781385,
        0.012291851983914071,
        -0.014450589851381347,
        -0.041421606566596714,
        -0.05018918856526014,
        -0.025933101216317672,
        0.03394517722329659,
        0.11612232604813434,
        0.19513123601730936,
        0.24347923270043995,
        0.24347923270043995,
        0.19513123601730936,
        0.11612232604813434,
        0.03394517722329659,
        -0.025933101216317672,
        -0.05018918856526014,
        -0.041421606566596714,
        -0.014450589851381347,
        0.012291851983914071,
        0.025574286331781385,
        0.022172065878291854,
        0.00800563700908981,
        -0.0069572953029268525,
        -0.014703261637603555,
        -0.012862659808170144,
        -0.0046645972566385554,
        0.0040456650224074651,
        0.0085194671337849165,
        0.0073998732470493874,
        0.0026579628895631122,
        -0.0022692944513388992,
        -0.0047065995954001117,
        -0.0040119731215088154,
        -0.0014109570575621668,
        0.0011698129325984573,
        0.0023575316971358984,
        0.0019426724039296576,
        0.00065737693207229997,
        -0.00051892546397063074,
        -0.0010137373532784653,
        -0.0011227727551926443,
        8.6464950643449706e-05,
    ];

    fir::FIRFilter::new(COEFS)
}
